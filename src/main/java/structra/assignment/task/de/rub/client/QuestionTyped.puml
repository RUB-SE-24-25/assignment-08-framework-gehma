#Try an interface pattern where every question type is innitiated by QuestionType instead of directly implemented

@startuml

interface QuestionType {
    + getInitials() : QuestionData
    + isStable() : boolean
    + getDisplayName() : String
}



class BooleanQuestion implements QuestionType {
    - stable : boolean = false
    - displayName : String = "Boolean"
    + getInitials() : QuestionData
    + isStable() : boolean
    + getDisplayName() : String
}

class SingleChoiceQuestion implements QuestionType {
    - stable : boolean = true
    - displayName : String = "Single Choice"

    + getInitials() : QuestionData
    + isStable() : boolean
    + getDisplayName() : String
}

class MultipleChoiceQuestion implements QuestionType {
    - stable : boolean = true
    - displayName : String = "Multiple Choice"

    + getInitials() : QuestionData
    + isStable() : boolean
    + getDisplayName() : String
}

class OpenAnswerQuestion implements QuestionType {
    - stable : boolean = true
    - displayName : String = "Open Answer"
    + getInitials() : QuestionData
    + isStable() : boolean
    + getDisplayName() : String
}






QuestionType <-- BooleanQuestion
QuestionType <-- SingleChoiceQuestion
QuestionType <-- MultipleChoiceQuestion
QuestionType <-- OpenAnswerQuestion

@enduml
